{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // 以下のような配列を返します:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // 投稿のメタデータ部分を解析するために gray-matter を使う\n\n  const matterResult = matter(fileContents); // マークダウンを HTML 文字列に変換するために remark を使う\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // データを id および contentHtml と組み合わせる\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}\nexport function getSortedPostsData() {\n  // /posts　配下のファイル名を取得する\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // id を取得するためにファイル名から \".md\" を削除する\n    const id = fileName.replace(/\\.md$/, ''); // マークダウンファイルを文字列として読み取る\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // 投稿のメタデータ部分を解析するために gray-matter を使う\n\n    const matterResult = matter(fileContents); // データを id と合わせる\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // 投稿を日付でソートする\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/vue_sample/works/next_tutorial/nextjs-blog-git/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getAllPostIds","fileNames","readdirSync","map","fileName","params","id","replace","getPostData","fullPath","fileContents","readFileSync","matterResult","processedContent","use","content","contentHtml","toString","data","getSortedPostsData","allPostsData","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAD8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOK,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,WAAf,CAA2BF,EAA3B,EAA+B;AACpC,QAAMG,QAAQ,GAAGjB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA2B,GAAEU,EAAG,KAAhC,CAAjB;AACA,QAAMI,YAAY,GAAGnB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFoC,CAIpC;;AACA,QAAMG,YAAY,GAAGnB,MAAM,CAACiB,YAAD,CAA3B,CALoC,CAOpC;;AACA,QAAMG,gBAAgB,GAAG,MAAMnB,MAAM,GAClCoB,GAD4B,CACxBnB,IADwB,EAE5BG,OAF4B,CAEpBc,YAAY,CAACG,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXoC,CAapC;;AACA;AACEX,IAAAA,EADF;AAEEU,IAAAA;AAFF,KAGKJ,YAAY,CAACM,IAHlB;AAKD;AAED,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMlB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMwB,YAAY,GAAGnB,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAME,EAAE,GAAGF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAME,QAAQ,GAAGjB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BQ,QAA1B,CAAjB;AACA,UAAMM,YAAY,GAAGnB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN6C,CAQ7C;;AACA,UAAMG,YAAY,GAAGnB,MAAM,CAACiB,YAAD,CAA3B,CAT6C,CAW7C;;AACA;AACEJ,MAAAA;AADF,OAEKM,YAAY,CAACM,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOE,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory)\n\n  // 以下のような配列を返します:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    }\n  })\n}\n\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  // 投稿のメタデータ部分を解析するために gray-matter を使う\n  const matterResult = matter(fileContents)\n\n  // マークダウンを HTML 文字列に変換するために remark を使う\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content)\n  const contentHtml = processedContent.toString()\n\n  // データを id および contentHtml と組み合わせる\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data\n  }\n}\n\nexport function getSortedPostsData() {\n  // /posts　配下のファイル名を取得する\n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = fileNames.map(fileName => {\n    // id を取得するためにファイル名から \".md\" を削除する\n    const id = fileName.replace(/\\.md$/, '')\n\n    // マークダウンファイルを文字列として読み取る\n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // 投稿のメタデータ部分を解析するために gray-matter を使う\n    const matterResult = matter(fileContents)\n\n    // データを id と合わせる\n    return {\n      id,\n      ...matterResult.data\n    }\n  })\n  // 投稿を日付でソートする\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}"]},"metadata":{},"sourceType":"module"}